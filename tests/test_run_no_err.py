import subprocess


# start a run with 100 samples and wandb turned off to make sure nothing broke
def test_run_no_errors():
    test_params = [
        '--architecture=decoder-transformer',
        '--batch_size=4',
        '--context_len=64',
        '--d_model=16',
        '--dataset=southpark',
        '--device=cpu',
        '--d_feedforward=16',
        '--dropout=0',
        '--epochs=1',
        '--log_text_samples=True',
        '--gradient_clip_value=1.0',
        '--lr=0.0001',
        '--num_heads=2',
        '--num_layers=1',
        '--optimizer=adamw',
        '--save_model_every_epoch=False',
        '--scheduler=None',
        '--tokenizer=bpe-metaspace-punctuation-256',
        '--use_attn_mask=True',
        '--use_gradient_clipping=True',
        '--log_wandb=False',
        '--num_samples=100',
        '--evaluation_interval=10',
        '--max_len_generate=64',
    ]

    script_name = 'main.py'
    arguments = test_params

    # Construct the command to call the other script
    command = ['python', script_name] + arguments

    # Execute the command
    result = subprocess.run(command, capture_output=True, text=True)

    # Print the output and any errors
    output_str = result.stdout
    error_str = result.stderr
    print('Output:\n', output_str)
    print('\n\nError:\n', error_str)

    # Check that the output contains the required strings
    assert "INFO - Start training..." in error_str
    assert "wandb: Run summary:" in error_str
    assert "ERROR" not in error_str
    assert "error" not in error_str
    assert "Traceback" not in error_str

    # TODO: delete files generated by offline run
